---
title: "Craft Beer Histogram"
author: "Jake"
date: "3/19/2023"
output: html_document
runtime: shiny
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r include=FALSE}
library(shiny)
library(tidyverse)
library(ggthemes)
library(maps)
library(mapproj)
library(ggridges)

beer_data = read.csv("./beers_data_updated.csv")
colnames(beer_data)[1] = "Name"
# Make ABV a percent 
beer_data$ABV <- beer_data$ABV * 100
# Remove dates from beer names
beer_data$Name <- str_remove_all(beer_data$Name, '[(\\d{4})]')
# Remove Duplicates based on beer name, brewery and style
beer_data <- beer_data %>%
  distinct(Name, Brewery_id, Style, .keep_all=TRUE)
# Delete all NA ABV because we couldn't find values
beer_data <- beer_data %>% filter(!is.na(ABV))

# Find Mean and fill in missing IBU values
# Separate data based on if IBU is in the data
beer_data1 = beer_data %>% filter(!is.na(IBU))
beer_data2 = beer_data %>% filter(is.na(IBU))
# Compute the mean of IBU for all styles
bbaggrdf = beer_data1 %>% group_by(Style) %>% summarize(Mean=mean(IBU))
# Merge mean IBU for style into data set that doesn't have IBU
bbfillmngDF = merge(beer_data2, bbaggrdf, by = "Style")
bbfillmngDF <- bbfillmngDF[, !names(bbfillmngDF) %in% c('IBU')]
colnames(bbfillmngDF)[colnames(bbfillmngDF)=='Mean'] = "IBU"
# Combine all data back together to get one data set again
beer_data = union(beer_data1,bbfillmngDF)

breweriesdf  <- read.csv("./Breweries.csv")
# Trim out white space and change case to all upper so we can remove the 
# duplicated breweries
breweriesdf <- breweriesdf %>%
  mutate_if(is.character, str_trim)
breweriesdf <- breweriesdf %>%
  mutate_if(is.character, toupper)

# Remove duplicate Breweries
breweriesdf <- breweriesdf %>%
  distinct(Name, City, State, .keep_all=TRUE)
# Create a look-up table for states
lookup = data.frame(abb = state.abb, StateFN = state.name)

# Replace DC with MD as its the state most of DC falls into and we need all
# records to map to a state for the map graph later
breweriesdf <- breweriesdf %>%
  mutate(State = case_when(State == "DC" ~ "MD",
                           State != "DC" ~ State))
# Add State info to breweries data set
breweriesdf = merge(breweriesdf, lookup, by.x = "State", by.y = "abb")

# Get a count of all breweries in each State
breweriesByStatedf <- breweriesdf %>% group_by(StateFN, State) %>% 
  summarise(breweryCount=n(), .groups = 'drop')

# Join mapping data to count of breweries in each State data
breweriesByStatedf$region <- tolower(breweriesByStatedf$StateFN)
states <- map_data("state")
map.df <- merge(states, breweriesByStatedf, by="region", all.x=T)
map.df <- map.df[order(map.df$order),]

# Create data for state abbreviation for map graph
centroids <- data.frame(region=tolower(state.name), long=state.center$x, 
                        lat=state.center$y)
centroids$abb <- state.abb[match(centroids$region,tolower(state.name))]

# Merge map data to brewery data
beer_data <- merge(beer_data, breweriesdf, by.x = "Brewery_id", 
                      by.y = "Brew_ID")

state_list <- beer_data$State

```

```{r echo = FALSE}

ui <- fluidPage(
  
  # App title ----
  titlePanel("Craft Beer App!"),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    
    # Sidebar panel for inputs ----
    sidebarPanel(
      
      #Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 10,
                  value = 5),
      
      # State Filter
      selectInput("stateFilter",
                  label = "Select a State to Filter to",
                  choices = state_list,
                  multiple = TRUE),
      
      # Radio Button for Type of Graph 
      radioButtons("radioButtonIBU", "Choose one for IBU Graph:",
                   c("Histogram" = "Hist", "Boxplot" = "Box",
                     "Density" = "Density")),
      radioButtons("radioButtonABV", "Choose one for ABV Graph:", 
                   c("Histogram" = "Hist", "Boxplot" = "Box",
                     "Density" = "Density")),
      # Radio Button for linear regression line on scatter plot
      radioButtons("LMLine", "Add a Linear Regression line to scatter plot?",
                   c("Yes" = "Y", "No" = "N"))
                                                   
    ),
    
    # Main panel for displaying outputs ----
    mainPanel(
      
      # Output: Histogram ----
      plotOutput(outputId = "IBUPlot"),
      plotOutput(outputId = "ABVPlot"),
      plotOutput(outputId = "scatterPlot"),
      plotOutput(outputId = "map")
      
    )
  )
)


# Define server logic required to draw a histogram ----
server <- function(input, output) {
  
  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot

  #c(input$stateFilter)  
  
  output$IBUPlot <- renderPlot({
    if(input$radioButtonIBU == "Hist" & length(input$stateFilter) == 0)
    {
    x    <- beer_data$IBU
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "IBU",
         main = "Histogram of IBU")
    }
    if(input$radioButtonIBU == "Hist" & length(input$stateFilter) != 0)
    {
    x    <- beer_data %>% filter(State %in% c(input$stateFilter)) %>% select(IBU)
    x    <- as.numeric(unlist(x))
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "IBU",
         main = "Histogram of IBU")
    }
    if(input$radioButtonIBU == "Box" & !length(input$stateFilter))
    {
    beer_data %>%
      mutate(bins = cut(beer_data$IBU, 
                        seq(min(beer_data$IBU), max(beer_data$IBU), 
                            length.out = 5 + 1),
                        labels = FALSE
                        )) %>%
      filter(!is.na(bins)) %>% # drop things not binned
      ggplot(aes(x=factor(bins), y=IBU)) +
          geom_boxplot() +
          ggtitle("IBU Boxplot") +
          xlab("Bin Number") +
          theme_economist() +
          coord_flip()
    }
    else if(input$radioButtonIBU == "Box") 
    {
      beer_data %>%
        filter(State %in% c(input$stateFilter)) %>%
        mutate(bins = cut(IBU, 
                          seq(min(IBU), max(IBU), 
                              length.out = input$bins + 1),
                          labels = FALSE
                          )) %>%
        filter(!is.na(bins)) %>% # drop things not binned
        ggplot(aes(x=factor(bins), y=IBU)) +
          geom_boxplot() +
          ggtitle("IBU Boxplot") +
          xlab("Bin Number") +
          theme_economist() +
          coord_flip()
    }
    if(input$radioButtonIBU == "Density" & !length(input$stateFilter))
    {
    beer_data %>%
      mutate(bins = cut(beer_data$IBU, 
                        seq(min(beer_data$IBU), max(beer_data$IBU), 
                            length.out = input$bins + 1),
                        labels = FALSE
                        )) %>%
      filter(!is.na(bins)) %>% # drop things not binned
      ggplot(aes(x=IBU, y=factor(bins))) +
        geom_density_ridges() +
        ggtitle("IBU Boxplot") +
        xlab("Bin Number") +
        theme_economist()
    }
    else if(input$radioButtonIBU == "Density") 
    {
      beer_data %>%
        filter(State %in% c(input$stateFilter)) %>%
        mutate(bins = cut(IBU, 
                          seq(min(IBU), max(IBU), 
                              length.out = input$bins + 1),
                          labels = FALSE
                          )) %>%
        filter(!is.na(bins)) %>% # drop things not binned
        ggplot(aes(x=IBU, y=factor(bins))) +
          geom_density_ridges() +
          ggtitle("IBU Boxplot") +
          xlab("Bin Number") +
          theme_economist()
    }
    
    
  })
  
    
  output$ABVPlot <- renderPlot({
    if(input$radioButtonABV == "Hist" & length(input$stateFilter) == 0)
    {
    x    <- beer_data$ABV
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "ABV",
         main = "Histogram of ABV")
    }
    
    if(input$radioButtonABV == "Hist" & length(input$stateFilter) != 0)
    {
    x    <- beer_data %>% filter(State %in% c(input$stateFilter)) %>% select(ABV)
    x    <- as.numeric(unlist(x))
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "ABV",
         main = "Histogram of ABV")
    }
    
    if(input$radioButtonABV == "Box" & !length(input$stateFilter))
    {
    beer_data %>%
      mutate(bins = cut(beer_data$ABV, 
                        seq(min(beer_data$ABV), max(beer_data$ABV), 
                            length.out = input$bins + 1),
                        labels = FALSE
                        )) %>%
      filter(!is.na(bins)) %>% # drop things not binned
      ggplot(aes(x=factor(bins), y=ABV)) +
        geom_boxplot() +
        ggtitle("ABV Boxplot") +
        xlab("Bin Number") +
        theme_economist() +
        coord_flip()
    }
    else if(input$radioButtonABV == "Box") 
    {
      beer_data %>%
        filter(State %in% c(input$stateFilter)) %>%
        mutate(bins = cut(ABV, 
                          seq(min(ABV), max(ABV), 
                              length.out = input$bins + 1),
                          labels = FALSE
                          )) %>%
        filter(!is.na(bins)) %>% # drop things not binned
        ggplot(aes(x=factor(bins), y=ABV)) +
          geom_boxplot() +
          ggtitle("ABV Boxplot") +
          xlab("Bin Number") +
          theme_economist() +
          coord_flip()
    }
    
    if(input$radioButtonABV == "Density" & !length(input$stateFilter))
    {
    beer_data %>%
      mutate(bins = cut(beer_data$ABV, 
                        seq(min(beer_data$ABV), max(beer_data$ABV), 
                            length.out = input$bins + 1),
                        labels = FALSE
                        )) %>%
      filter(!is.na(bins)) %>% # drop things not binned
      ggplot(aes(x=IBU, y=factor(bins))) +
          geom_density_ridges() +
          ggtitle("IBU Boxplot") +
          xlab("Bin Number") +
          theme_economist()
    }
    else if(input$radioButtonABV == "Density") 
    {
      beer_data %>%
        filter(State %in% c(input$stateFilter)) %>%
        mutate(bins = cut(ABV, 
                          seq(min(ABV), max(ABV), 
                              length.out = input$bins + 1),
                          labels = FALSE
                          )) %>%
        filter(!is.na(bins)) %>% # drop things not binned
        ggplot(aes(x=IBU, y=factor(bins))) +
          geom_density_ridges() +
          ggtitle("IBU Boxplot") +
          xlab("Bin Number") +
          theme_economist()
    }
  })

  
  output$scatterPlot <- renderPlot({
    
    if(input$LMLine == 'Y' & length(input$stateFilter) == 0)
    {
      beer_data %>%
      ggplot(aes(x=IBU, y=ABV)) +
        geom_point() +
        geom_smooth(method = lm) +
        theme_economist()
    }
    else if(input$LMLine == 'Y' & length(input$stateFilter) != 0)
    {
      beer_data %>%
        filter(State %in% c(input$stateFilter)) %>%
        ggplot(aes(x=IBU, y=ABV)) +
          geom_point() +
          geom_smooth(method = lm) +
          theme_economist()      
    }
    else if(input$LMLine == 'N' & length(input$stateFilter) == 0)
    {
      beer_data %>%
      ggplot(aes(x=IBU, y=ABV)) +
        geom_point() +
        theme_economist()
    }
    else if(input$LMLine == 'N' & length(input$stateFilter) != 0)
    {
      beer_data %>%
        filter(State %in% c(input$stateFilter)) %>%
        ggplot(aes(x=IBU, y=ABV)) +
          geom_point() +
          theme_economist()      
    }

     
  })
  
  output$map <- renderPlot({
    ggplot(map.df, aes(x=long, y=lat, group=group)) +
      geom_polygon(aes(fill=breweryCount)) +
      with(centroids,
           annotate(geom="text", x=long, y=lat, label=abb, size=4, 
                    color="black")) +
      scale_fill_gradientn(colors=rev(heat.colors(5)), na.value="skyblue") + 
      ggtitle("Breweries by State") +
      coord_map()
  })
  
}

shinyApp(ui, server)

```
